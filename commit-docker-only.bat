@echo off
setlocal enabledelayedexpansion

echo.
echo ==========================================
echo üöÄ Commit - Docker Only (Sem Nixpacks)
echo ==========================================
echo.

echo üìÅ Diret√≥rio atual: %CD%
echo.

echo üîç Verificando arquivos...
echo.

REM Verificar Dockerfile
if exist "Dockerfile" (
    echo ‚úÖ Dockerfile - ENCONTRADO
) else (
    echo ‚ùå Dockerfile - N√ÉO ENCONTRADO
)

REM Verificar app.py na raiz
if exist "app.py" (
    echo ‚úÖ app.py - ENCONTRADO
) else (
    echo ‚ùå app.py - N√ÉO ENCONTRADO
)

REM Verificar requirements.txt
if exist "requirements.txt" (
    echo ‚úÖ requirements.txt - ENCONTRADO
) else (
    echo ‚ùå requirements.txt - N√ÉO ENCONTRADO
)

REM Verificar .dockerignore
if exist ".dockerignore" (
    echo ‚úÖ .dockerignore - ENCONTRADO
) else (
    echo ‚ùå .dockerignore - N√ÉO ENCONTRADO
)

REM Verificar se Procfile foi removido
if not exist "Procfile" (
    echo ‚úÖ Procfile - REMOVIDO (correto)
) else (
    echo ‚ö†Ô∏è  Procfile - AINDA EXISTE (deve ser removido)
)

REM Verificar se runtime.txt foi removido
if not exist "runtime.txt" (
    echo ‚úÖ runtime.txt - REMOVIDO (correto)
) else (
    echo ‚ö†Ô∏è  runtime.txt - AINDA EXISTE (deve ser removido)
)

REM Verificar se nixpacks.toml foi removido
if not exist "nixpacks.toml" (
    echo ‚úÖ nixpacks.toml - REMOVIDO (correto)
) else (
    echo ‚ö†Ô∏è  nixpacks.toml - AINDA EXISTE (deve ser removido)
)

REM Verificar webapp/app.py
if exist "webapp\app.py" (
    echo ‚úÖ webapp\app.py - ENCONTRADO
) else (
    echo ‚ùå webapp\app.py - N√ÉO ENCONTRADO
)

echo.

REM Verificar status do git
echo üìã Status do Git:
git status --short
echo.

REM Adicionar todos os arquivos
echo üì¶ Adicionando arquivos ao Git...
git add .
if !errorlevel! neq 0 (
    echo ‚ùå Erro ao adicionar arquivos
    pause
    exit /b 1
)

echo ‚úÖ Arquivos adicionados
echo.

REM Fazer commit
echo üíæ Fazendo commit...
git commit -m "Docker Only - For√ßa uso do Dockerfile

- Dockerfile otimizado com python -m pip
- Removido Procfile (evita Nixpacks)
- Removido runtime.txt (evita Nixpacks)
- Removido nixpacks.toml (evita Nixpacks)
- Criado .dockerignore para build limpo
- Adicionado build-essential para compila√ß√£o
- Comando: python -m pip install

Configura√ß√£o no Easypanel:
- Service Type: Docker
- Dockerfile Path: Dockerfile
- Port: 5000

Solu√ß√£o para erros:
- pip: command not found
- NIXPACKS_PATH undefined
- nix-env installation failed

Vantagens:
- For√ßa uso do Dockerfile
- Evita detec√ß√£o autom√°tica do Nixpacks
- Build mais r√°pido e confi√°vel
- Sem conflitos de ambiente"
if !errorlevel! neq 0 (
    echo ‚ùå Erro ao fazer commit
    pause
    exit /b 1
)

echo ‚úÖ Commit realizado com sucesso
echo.

REM Push para o reposit√≥rio
echo üöÄ Enviando para o reposit√≥rio...
git push origin main
if !errorlevel! neq 0 (
    echo ‚ùå Erro ao enviar para o reposit√≥rio
    pause
    exit /b 1
)

echo ‚úÖ Push realizado com sucesso
echo.

echo ==========================================
echo üéâ COMMIT CONCLU√çDO - DOCKER ONLY!
echo ==========================================
echo.
echo üìã Configura√ß√£o no Easypanel:
echo 1. Service Type: Docker
echo 2. Dockerfile Path: Dockerfile
echo 3. Port: 5000
echo.
echo üîß Solu√ß√£o implementada:
echo - Dockerfile otimizado
echo - Procfile removido
echo - runtime.txt removido
echo - nixpacks.toml removido
echo - .dockerignore criado
echo - python -m pip install
echo.
echo üéØ Vantagens:
echo - For√ßa uso do Dockerfile
echo - Evita Nixpacks autom√°tico
echo - Build mais r√°pido
echo - Sem conflitos de ambiente
echo.
echo üß™ Teste ap√≥s deploy:
echo curl https://seu-dominio.com/api/health
echo.
echo üöÄ Problemas resolvidos:
echo - pip: command not found
echo - NIXPACKS_PATH undefined
echo - nix-env installation failed
echo.
echo ‚úÖ Agora usa apenas Dockerfile!
echo.
pause
