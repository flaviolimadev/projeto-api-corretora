// Prisma Schema para TradingView Scraper Database
// Database: PostgreSQL (Production)

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-py"
  interface = "asyncio"
}

// Tabela de Categorias
model Category {
  id          String   @id @default(uuid())
  key         String   @unique // forex, crypto, stocks, etc
  name        String
  description String
  icon        String
  exchanges   String[] // Array de exchanges (PostgreSQL)
  timeframes  String[] // Array de timeframes (PostgreSQL)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relacionamentos
  assets      Asset[]
  
  @@index([key])
  @@map("categories")
}

// Tabela de Ativos
model Asset {
  id            String   @id @default(uuid())
  symbol        String   @unique // BINANCE:BTCUSDT
  exchange      String
  ticker        String   // BTCUSDT
  description   String
  type          String
  categoryKey   String
  searchQuery   String?
  isActive      Boolean  @default(true)
  lastUpdate    DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relacionamentos
  category      Category @relation(fields: [categoryKey], references: [key], onDelete: Cascade)
  candles       Candle[]
  currentCandle CurrentCandle?
  
  @@index([symbol])
  @@index([exchange])
  @@index([categoryKey])
  @@index([isActive])
  @@map("assets")
}

// Tabela de Candles (Histórico)
model Candle {
  id         String   @id @default(uuid())
  assetId    String
  symbol     String   // BINANCE:BTCUSDT (denormalizado para performance)
  timeframe  String   // 1m, 5m, 15m, etc
  timestamp  BigInt   // Unix timestamp
  datetime   DateTime
  open       Float
  high       Float
  low        Float
  close      Float
  volume     Float
  createdAt  DateTime @default(now())
  
  // Relacionamentos
  asset      Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
  
  @@unique([assetId, timeframe, timestamp])
  @@index([symbol, timeframe, timestamp])
  @@index([assetId, timeframe])
  @@index([timestamp])
  @@map("candles")
}

// Tabela de Candle Atual (Sempre atualizado)
model CurrentCandle {
  id                  String   @id @default(uuid())
  assetId             String   @unique
  symbol              String   @unique // BINANCE:BTCUSDT
  timeframe           String
  timestamp           BigInt
  datetime            DateTime
  open                Float
  high                Float
  low                 Float
  close               Float
  volume              Float
  priceChange         Float
  priceChangePercent  Float
  isPositive          Boolean
  lastUpdate          DateTime @default(now())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relacionamentos
  asset               Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
  
  @@index([symbol])
  @@index([lastUpdate])
  @@map("current_candles")
}

// Tabela de Logs de Sincronização
model SyncLog {
  id          String   @id @default(uuid())
  type        String   // categories, assets, candles, current_candles
  status      String   // success, error, running
  itemsCount  Int      @default(0)
  errorMsg    String?
  duration    Float?   // segundos
  startedAt   DateTime @default(now())
  finishedAt  DateTime?
  
  @@index([type, status])
  @@index([startedAt])
  @@map("sync_logs")
}

// Tabela de Configurações
model Config {
  id          String   @id @default(uuid())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("configs")
}
